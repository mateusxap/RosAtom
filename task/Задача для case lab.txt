Задача глобальная: необходимо разработать детектор элементов документа по картинке
Подзадачи:
1. Создать генератор документов docx или pdf для получения обучающей выборки
2. Сформировать из документов набор данных - картинки и координатную разметку к ним
3. Обучить модель на этих данных


Для решения подзадачи 1 предлагается использовать библиотеку python-docx. Она позволяет создать документ docx, например, с таблицами и текстом и применить к ним различные стили. Для наполнения текстом предлагается использовать библиотеки Faker и Mimesis, которые позволяют сгенерировать текст на русском и английском языках.
Пример алгоритма:
1. Создаем документ
2. Случайным образом определяем ориентацию страницы
3. Вставляем заголовок - случайный текст, применяем к нему стиль - жирный, 16 шрифт
4. Вставляем строчку "Таблица 1. <случайный текст>", делаем ее на 2 размера меньше, чем основной текст - курсив, 12 шрифт
5. Вставляем таблицу со случайным числом колонок и строк, делаем видимой сетку, выравнивание по левому краю
6. Заполняем таблицу числами и датами с помощью Mimesis - обычный, 14 шрифт
7. Вставляем случайный текст от 500 до 1000 символов с помощью Faker - обычный, 14 шрифт, выравнивание по ширинеъ
8. Повторяем много раз, изменяя стили текста, наличие таблиц, выравнивания, размер шрифта, заполнение ячеек, количество текста и т.д.
9. Сохраняем документ

Требования к генератору:
1. Документы должны содержать:
    - заголовки (на 2 и более размера крупнее основного текста, жирные и/или курсив, чаще с выравниванием по середине, возможно с нумерацией)
	- абзацы текста (с красной строки и без, шрифт от 8 до 16, различное выравнивание)
	- таблицы (с сеткой и без, левые-правые границы могут быть без сетки, цветные и черно-белые, различное выравнивание самой таблицы и ячеек внутри)
	- рисунки (любые картинки, графики, встроенные элементы)
	- подписи к рисункам (часто на 1-2 размера меньше, реже до и чаще после картинки, начинаются с "Рис. <номер>", "Рисунок <номер> -", "Рисунок <номер>", часто выравнивание по центру)
	- подписи к таблицам (такого же или на 1-2 размера меньше основного текста, перед таблицей, начинаются с "Табл. <номер>", "Таблица <номер> -", "Таблица. < без номера>")
    - нумерованные списки (у них обычно меньше межстрочный интервал и есть отступ)
	- маркированные списки (у них обычно меньше межстрочный интервал и есть отступ)
	- верхний и нижний колонтитулы (будет плюсом)
	- сноски (будет плюсом)
	- формулы (будет плюсом, если получится)
2. Должны быть примеры с несколькими колонками текста
3. Размер выборки 10 тыс. изображений.
4. Сохранить файлы в папку "docx".


Необходимо помнить о том, что в последствии нужно будет получить разметку данных в автоматическом режиме (подзадача 2).
Для решения подзадачи 2 предлагается:
1. Сконвертировать полученную выборку docx документов в pdf собственноручно (файл - сохранить как PDF) или с помощью библиотеки docx2pdf (сделает это за вас). Сохранить файлы нужно в папку "pdf" с таким же именем. Если конвертируете руками, то лучше сделать несколько файлов по 500-1000 страниц, иначе будет очень долго открываться. Если делаете с помощью docx2pdf, то проще генерировать отдельные файлы - будет немного проще получать разметку.
2. C помощью, например, pypdfium2 из pdf файлов получить изображения (300dpi, цветные) и сохранить их с именем "<имя_файла>_<номер_страницы>.<png или webp>" в папку "image".
3. Написать алгоритм для извлечения координат из pdf файлов для всех элементов документа из п.1 Требований к генератору, например с помощью библиотеки pdfminer. Эта библиотека позволяет получить текст, координаты, шрифт, размер шрифта для каждого символа в pdf документе.
Пример:
	- получить координаты и текст всех строк. Найти с помощью регулярного выражения строки, которые начинается с "Рис. <номер>" или других вариантов подписи - взять координаты этой строки или строк до рисунка (например, до символа "\n" - символ переноса строки)
	- аналогичным образом поступить с подписью к таблицам.
Также можно ориентироваться на размер шрифта или его изменение. Например, первая строка - "жирный, 16 шрифт", затем идет "обычный, 12 шрифт" - значит первая строка это заголовок, а остальное - абзац. Необходимо сохранить разметку для каждой страницы в файле "<имя_файла>_<номер_страницы>.json" в папке "json".

Структура json:
{
	"image_height": int, # высота изображения
	"image_width": int, # ширина изображения
	"image_path": str, # путь к картинке
	"title": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"paragraph": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"table": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"picture": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"table_signature": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"picture_signature": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"numbered_list": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"marked_list": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"marked_list": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"header": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"footer": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"footnote": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	],
	"formula": [
		[x1, y1, x2, y2],
		[x1, y2, x2, y2], ...
	]
}